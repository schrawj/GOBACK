require(stringr); require(dplyr); require(tictoc)
load("//discovery2/bcm-pedi-genepi2/Jeremy/GOBACK/Datasets/Expanded datasets/bd.codes.txnc.v20180606.rdata")
codes <- as.character()
for (i in 1:nrow(bd.codes.txnc)){
tmp <- as.character(bd.codes.txnc[i,2:67])
codes <- c(codes, subset(tmp, !is.na(tmp)))
codes <- subset(codes, !duplicated(codes))
}
codes <- sort(codes)
bd.codes.txnc.transpose <- as.data.frame(matrix(nrow = nrow(bd.codes.txnc), ncol = 1 + length(codes)))
names(bd.codes.txnc.transpose) <- c('studyid', codes)
bd.codes.txnc.transpose[, 1] <- bd.codes.txnc$studyid
bd.codes.txnc <- arrange(bd.codes.txnc, studyid)
bd.codes.txnc.transpose <- arrange(bd.codes.txnc.transpose, studyid)
l <- list()
tic()
for (i in 1:nrow(bd.codes.txnc)){
tmp <- as.character(bd.codes.txnc[i,2:67])
tmp <- subset(tmp, !duplicated(tmp))
tmp <- subset(tmp, !is.na(tmp))
for (j in 1:length(tmp)){
tmp[j] <- which(codes == tmp[j])
}
tmp <- as.numeric(tmp) + 1
l[[i]] <- tmp
}
toc()
l[[1]]
l[[2]]
names(bd.codes.txnc.transpose[1547])
bd.codes.txnc[1,]
bd.codes.txnc[10000,]
l[[10000]]
bd.codes.txnc.transpose[,2320]
names(bd.codes.txnc.transpose[2320])
l[[1]]
j <- 1
l[[1]][j]
length(l[[1]])
length(l[[4]])
tmp <- bd.codes.txnc.transpose
tmp[1,1]
l[[1]]
tmp[1,1546]
tmp[1,1547]
tic()
for (i in 1){
for (j in l[[1]]){
tmp[i, j] <- 1
}
}
toc()
tmp[1,1]
tmp[1,1547]
l[[1]]
l[[2]]
l[[3]]
tmp[1,c(1,1547)]
tmp[2,c(1,591:593)]
tmp[3,c(1,1545:1547)]
tmp <- bd.codes.txnc.transpose
tic()
for (i in 1:3){
for (j in l[[1]]){
tmp[i, j] <- 1
}
}
toc()
tmp[2,c(1,591:593)]
tmp <- bd.codes.txnc.transpose
tmp[2,c(1,591:593)]
tic()
for (i in 1:3){
for (j in l[[1]]){
tmp[, j] <- 1
}
}
toc()
tmp[2,c(1,591:593)]
tmp <- bd.codes.txnc.transpose
tic()
for (i in 1:3){
for (j in l[[i]]){
tmp[i, j] <- 1
}
}
toc()
tmp[2,c(1,591:593)]
tmp[3,c(1,1545:1547)]
bd.codes.txnc[3,]
bd.codes.txnc[2,]
tmp <- bd.codes.txnc.transpose
tic()
for (i in 1:nrow(bd.codes.txnc.transpose)){
for (j in l[[i]]){
bd.codes.txnc.transpose[i, j] <- 1
}
}
toc()
tmp <- bd.codes.txnc[c(4,1000,25000,100001), ]
print(tmp[,1:10])
ids <- c(tmp$studyid)
tmp2 <- filter(bd.codes.txnc.transpose, studyid %in% ids)
tmp2[, '755.130']
tmp2[, '758.990']
tmp2[, '755.020']
tmp2[, '754.303']
tmp2[, '755.667']
save(bd.codes.txnc.transpose, file = 'Z:/Jeremy/GOBACK/Datasets/Expanded datasets/bd.codes.txnc.transpose.v20180614.rdata')
load("//discovery2/bcm-pedi-genepi2/Jeremy/GOBACK/Datasets/Expanded datasets/bd.codes.mi.v20180606.rdata")
rm(bd.codes.txnc, bd.codes.txnc.transpose, tmp, tmp2, i, j, ids, l)
names(bd.codes.mi)
for (i in 1:nrow(bd.codes.mi)){
tmp <- as.character(bd.codes.mi[i,2:25])
codes <- c(codes, subset(tmp, !is.na(tmp)))
codes <- subset(codes, !duplicated(codes))
}
codes <- sort(codes)
head(codes, 250)
#' Initialize an empty data frame with the proper dimensions and names.
bd.codes.mi.transpose <- as.data.frame(matrix(nrow = nrow(bd.codes.mi), ncol = 1 + length(codes)))
names(bd.codes.mi.transpose) <- c('studyid', codes)
bd.codes.mi.transpose[, 1] <- bd.codes.mi$studyid
#' Ensure both data frames have rows sorted in the same order.
bd.codes.mi <- arrange(bd.codes.mi, studyid)
bd.codes.mi.transpose <- arrange(bd.codes.mi.transpose, studyid)
tic()
for (i in 1:nrow(bd.codes.mi)){
tmp <- as.character(bd.codes.mi[i,2:25])
tmp <- subset(tmp, !duplicated(tmp))
tmp <- subset(tmp, !is.na(tmp))
for (j in 1:length(tmp)){
tmp[j] <- which(codes == tmp[j])
}
tmp <- as.numeric(tmp) + 1
l[[i]] <- tmp
}
toc()
l <- list()
tic()
for (i in 1:nrow(bd.codes.mi)){
tmp <- as.character(bd.codes.mi[i,2:25])
tmp <- subset(tmp, !duplicated(tmp))
tmp <- subset(tmp, !is.na(tmp))
for (j in 1:length(tmp)){
tmp[j] <- which(codes == tmp[j])
}
tmp <- as.numeric(tmp) + 1
l[[i]] <- tmp
}
toc()
l[[1]]
bd.codes.mi[1,]
i <- 1
bd.codes.mi <- arrange(bd.codes.mi, studyid)
bd.codes.mi.transpose <- arrange(bd.codes.mi.transpose, studyid)
l <- list()
tmp <- as.character(bd.codes.mi[i,2:25])
tmp <- subset(tmp, !duplicated(tmp))
tmp <- subset(tmp, !is.na(tmp))
which(tmp == 'NA')
tmp <- subset(tmp, tmp != 'NA')
codes <- subset(codes, codes != 'NA')
codes <- sort(codes)
#' Initialize an empty data frame with the proper dimensions and names.
bd.codes.mi.transpose <- as.data.frame(matrix(nrow = nrow(bd.codes.mi), ncol = 1 + length(codes)))
names(bd.codes.mi.transpose) <- c('studyid', codes)
bd.codes.mi.transpose[, 1] <- bd.codes.mi$studyid
#' Ensure both data frames have rows sorted in the same order.
bd.codes.mi <- arrange(bd.codes.mi, studyid)
bd.codes.mi.transpose <- arrange(bd.codes.mi.transpose, studyid)
l <- list()
tic()
for (i in 1:nrow(bd.codes.mi)){
tmp <- as.character(bd.codes.mi[i,2:25])
tmp <- subset(tmp, !duplicated(tmp))
tmp <- subset(tmp, tmp != 'NA')
for (j in 1:length(tmp)){
tmp[j] <- which(codes == tmp[j])
}
tmp <- as.numeric(tmp) + 1
l[[i]] <- tmp
}
toc()
l[[1]]
l[[2]]
bd.codes.mi[1,]
bd.codes.mi[2,]
which(names(bd.codes.mi.transpose[3771]) == '754.3')
which(names(bd.codes.mi.transpose) == '754.3')
which(names(bd.codes.mi.transpose) == '755.2')
which(names(bd.codes.mi.transpose) == '756.9')
tic()
for (i in 1:nrow(bd.codes.mi.transpose)){
for (j in l[[i]]){
bd.codes.mi.transpose[i, j] <- 1
}
}
toc()
bd.codes.mi[15000,]
bd.codes.mi.transpose[15000,'90.1']
bd.codes.mi.transpose[15000,'754.79']
bd.codes.mi.transpose[15000,'760.75']
bd.codes.mi.transpose[15000,'765.9']
bd.codes.mi.transpose[15000,'756.9']
save(bd.codes.mi.transpose, file = 'Z:/Jeremy/GOBACK/Datasets/Expanded datasets/bd.codes.mi.transpose.v20180614.rdata')
rm(list = ls); gc()
rm(list = ls()); gc()
rm(list = ls()); gc()
load("Y:/Jeremy Schraw/Metabolomics and relapse project/Datasets/Expanded datasets/metabolomics.subjects.expanded.clinical.outcomes.v20171213.1.rdata")
head(metab.clin.expanded.clinical.outcomes)
table(metab.clin.expanded.clinical.outcomes$relapse.type)
10+6+9
365*3
tmp <- filter(metab.clin.expanded.clinical.outcomes, relapse.type != 'No relapse')
tmp <- filter(tmp, time.to.relapse < 1096)
tmp <- filter(metab.clin.expanded.clinical.outcomes, relapse.type != 'No relapse')
unique(tmp$time.to.relapse)
